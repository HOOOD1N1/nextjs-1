import Header from "./components/Header";
import SearchSideBar from "./components/SearchSideBar";
import RestaurantCard from "./components/RestaurantCard";
import { Metadata } from "next";
import { PRICE, PrismaClient } from "@/prisma/generated/prisma/client";
import { equal } from "node:assert";

export const metadata: Metadata = {
    title: "Search | OpenTables",
    description: "Generated by create next app",
};

const prisma = new PrismaClient();

interface SearchParams {
    city?: string,
    cuisine?: string,
    price?: PRICE
}

const fetchRestaurantsByCity = (searchParams: SearchParams) => {

    const where: any = {}

    if (searchParams.city) {
        const location = {
            name: {
                equals: searchParams.city.toLocaleLowerCase()
            }
        }
        where.location = location;
    }
    if (searchParams.cuisine) {
        const cuisine = {
            name: {
                equals: searchParams.cuisine.toLocaleLowerCase()
            }
        }
        where.cuisine = cuisine;
    }
    if (searchParams.price) {
        const price = {
            equals: searchParams.price
        }
        where.price = price;
    }

    const select = {
        id: true,
        name: true,
        price: true,
        main_image: true,
        cuisine: true,
        location: true,
        slug: true
    }

    return prisma.restaurant.findMany({
        where,
        select,
    });
}

const fetchLocations = () => {
    return prisma.location.findMany();
}

const fetchCuisines = () => {

    return prisma.cuisine.findMany();
}

export default async function Search({ searchParams }: { searchParams: SearchParams }) {
    const { city, cuisine, price } = await searchParams;

    const restaurants = await fetchRestaurantsByCity({ city, cuisine, price });
    const locations = await fetchLocations();
    const cuisines = await fetchCuisines();
    return (
        <>
            <Header />
            <div className="flex py-4 m-auto w-2/3 justify-between items-start">
                <SearchSideBar locations={locations} cuisines={cuisines} city={city} cuisine={cuisine} price={price} />
                <div className="w-5/6">
                    {restaurants.length ? <>
                        {
                            restaurants.map(restaurant => (
                                <RestaurantCard restaurant={restaurant} key={restaurant.id} />
                            ))
                        }
                    </> : (<p>Sorry, we found no restaurant in this area</p>

                    )}
                </div>
            </div>
        </>
    );
}